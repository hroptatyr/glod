dnl -------------------------------------------------------------------------
dnl Autoconf startup.
dnl -------------------------------------------------------------------------

AC_PREREQ([2.64])
AC_INIT([glod], [0.1.4.GIT], [https://github.com/hroptatyr/glod])
AC_CONFIG_AUX_DIR([build-aux])
AC_CONFIG_HEADERS([src/config.h])
AC_CONFIG_MACRO_DIR([m4])

dnl -------------------------------------------------------------------------
dnl Local copyright notices.
dnl -------------------------------------------------------------------------

AC_COPYRIGHT([dnl
#### Configuration script for glod
#### Copyright (C) 2010-2014  Sebastian Freundt

### Don't edit this script!
### This script was automatically generated by the `autoconf' program
### from the file `./configure.ac'.
### To rebuild it, execute the command
###     autoreconf
])

AM_INIT_AUTOMAKE([foreign parallel-tests dist-xz color-tests subdir-objects])
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

AX_YUCK_SCMVER([version.mk])
AC_CONFIG_LINKS([GNUmakefile:GNUmakefile])

## the build chain
AC_PROG_CC([icc tcc gcc cc])
SXE_CHECK_CC([c11 c1x c99 gnu99])
SXE_CHECK_CFLAGS
AC_CHECK_TOOLS([AR], [xiar ar], [false])
AC_C_BIGENDIAN

## check for yuck helper
AX_CHECK_YUCK

## check for pseudo-tty support
AC_CHECK_HEADERS([pty.h])
AM_CONDITIONAL([HAVE_PTY_H], [test "${ac_cv_header_pty_h}" = "yes"])

## check for intrinsics
AC_CHECK_HEADERS([immintrin.h])
AC_CHECK_HEADERS([x86intrin.h])
AC_CHECK_HEADERS([ia32intrin.h])
AC_CHECK_HEADERS([popcntintrin.h])
AC_CHECK_TYPES([__m128i], [], [], [[
#if defined HAVE_X86INTRIN_H
# include <x86intrin.h>
#elif defined HAVE_IMMINTRIN_H
# include <immintrin.h>
#endif
]])
AC_CHECK_TYPES([__m256i], [], [], [[
#if defined HAVE_X86INTRIN_H
# include <x86intrin.h>
#elif defined HAVE_IMMINTRIN_H
# include <immintrin.h>
#endif
]])
AC_CHECK_TYPES([__m512i], [], [], [[
#if defined HAVE_X86INTRIN_H
# include <x86intrin.h>
#elif defined HAVE_IMMINTRIN_H
# include <immintrin.h>
#endif
]])

AC_DEFUN([SXE_CHECK_SIMD], [dnl
dnl Usage: SXE_CHECK_SIMD([INTRIN], [[SNIPPET], [IF-FOUND], [IF-NOT-FOUND]])
	AC_MSG_CHECKING([for SIMD routine $1])
	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
#if defined HAVE_IA32INTRIN_H
# include <ia32intrin.h>
#endif
#if defined HAVE_X86INTRIN_H
# include <x86intrin.h>
#endif
#if defined HAVE_IMMINTRIN_H
# include <immintrin.h>
#endif
#if defined HAVE_POPCNTINTRIN_H
# include <popcntintrin.h>
#endif
]], [ifelse([$2],[],[$1(0U)],[$2]);])], [
	eval AS_TR_SH(ac_cv_func_$1)="yes"
	$3
], [
	eval AS_TR_SH(ac_cv_func_$1)="no"
	$4
])
	AC_MSG_RESULT([${ac_cv_func_$1}])
])dnl SXE_CHECK_SIMD

SXE_CHECK_SIMD([_tzcnt_u32])
SXE_CHECK_SIMD([_tzcnt_u64])
SXE_CHECK_SIMD([_popcnt32])
SXE_CHECK_SIMD([_popcnt64])
SXE_CHECK_SIMD([_mm_popcnt_u32])
SXE_CHECK_SIMD([_mm_popcnt_u64])

SXE_CHECK_SIMD([_mm_add_epi8], [dnl
	__m128i x, y = _mm_setzero_si128();
	_mm_add_epi8(x, y)
])
SXE_CHECK_SIMD([_mm_cmpeq_epi8], [dnl
	__m128i x, y = _mm_setzero_si128();
	_mm_cmpeq_epi8(x, y)
])
SXE_CHECK_SIMD([_mm_movemask_epi8], [dnl
	__m128i x;
	_mm_movemask_epi8(x)
])
SXE_CHECK_SIMD([_mm_mpsadbw_epu8], [dnl
	__m128i x, y;
	_mm_mpsadbw_epu8(x, y, 0b101U)
])

SXE_CHECK_SIMD([_mm256_add_epi8], [dnl
	__m256i x, y = _mm256_setzero_si256();
	_mm256_add_epi8(x, y)
])
SXE_CHECK_SIMD([_mm256_cmpeq_epi8], [dnl
	__m256i x, y = _mm256_setzero_si256();
	_mm256_cmpeq_epi8(x, y)
])
SXE_CHECK_SIMD([_mm256_movemask_epi8], [dnl
	__m256i x;
	_mm256_movemask_epi8(x)
])
SXE_CHECK_SIMD([_mm256_mpsadbw_epu8], [dnl
	__m256i x, y;
	_mm256_mpsadbw_epu8(x, y, 0b101U)
])

SXE_CHECK_SIMD([_mm512_add_epi8], [dnl
	__m512i x, y = _mm512_setzero_si512();
	_mm512_add_epi8(x, y)
])
SXE_CHECK_SIMD([_mm512_cmpeq_epi8], [dnl
	__m512i x, y = _mm512_setzero_si512();
	_mm512_cmpeq_epi8(x, y)
])
SXE_CHECK_SIMD([_mm512_movemask_epi8], [dnl
	__m512i x;
	_mm512_movemask_epi8(x)
])

if test "${ac_cv_func__mm_cmpeq_epi8}" = "yes" -a \
	"${ac_cv_func__mm_add_epi8}" = "yes"; then
	AC_DEFINE([HAVE_MM128_INT_INTRINS], [1], [define if _mm128_* integer intrinsics are usable])
fi
if test "${ac_cv_func__mm256_cmpeq_epi8}" = "yes" -a \
	"${ac_cv_func__mm256_add_epi8}" = "yes"; then
	AC_DEFINE([HAVE_MM256_INT_INTRINS], [1], [define if _mm256_* integer intrinsics are usable])
fi
if test "${ac_cv_func__mm512_cmpeq_epi8}" = "yes" -a \
	"${ac_cv_func__mm512_add_epi8}" = "yes"; then
	AC_DEFINE([HAVE_MM512_INT_INTRINS], [1], [define if _mm512_* integer intrinsics are usable])
fi
if test "${ac_cv_func__mm_mpsadbw_epu8}" = "yes"; then
	AC_DEFINE([HAVE_MM128_SAD_INTRINS], [1], [define if sum-of-abs-diff intrinsics are usable])
fi
if test "${ac_cv_func__mm256_mpsadbw_epu8}" = "yes"; then
	AC_DEFINE([HAVE_MM256_SAD_INTRINS], [1], [define if sum-of-abs-diff intrinsics are usable])
fi

AM_CONDITIONAL([HAVE_INTRIN], [test "${ac_cv_type___m256i}" = "yes" -a "${ac_cv_func__tzcnt_u32}" = "yes"])


PKG_CHECK_MODULES([tokyocabinet], [tokyocabinet], [
	have_tcbdb="yes"
	AC_DEFINE([USE_TCBDB], [1], [define when tokyocabinet shall be db backend])
	with_database="tcbdb"
], [
	have_tcbdb="no"
])
AC_ARG_ENABLE([tokyocabinet], [dnl
AS_HELP_STRING([--disable-tokyocabinet], [
Disable binaries that make use of the tokyocabinet key/value store.])],
	[enable_tokyocabinet="${enableval}"], [enable_tokyocabinet="yes"])
AM_CONDITIONAL([HAVE_TCBDB], [test "${have_tcbdb}" = "yes" -a "${enable_tokyocabinet}" = "yes"])


## libtool goddess^Wgoodness
## has to be down here as we're turning -Werror'ing off
LT_INIT
SXE_CHECK_LIBTOOL

AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([build-aux/Makefile])
AC_CONFIG_FILES([info/Makefile])
AC_CONFIG_FILES([src/Makefile])
AC_CONFIG_FILES([test/Makefile])
AC_OUTPUT

echo
echo
echo "Build summary"
echo "============="
echo
echo "Everything will be built"
echo

## configure ends here
dnl configure.ac ends here
